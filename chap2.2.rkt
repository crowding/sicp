#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 63 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 16 #"Source Code Pro\0"
0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 251 162 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 251 162 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 84 191 233 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 84 191 233 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 147 175 101 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 147 175 101 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 212 207 211 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 212 207 211 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 16 #"Source Code Pro\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 2361 0 29 3 22 #"#lang planet neil/sicp"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 18 #";;; Exercise 2.17 "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"last-pair"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 4 #"list"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 9 #"last-pair"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.18"
0 0 25 29 1 #"\n"
0 7         319 4           0 0           0 52 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 5 #"accum"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"iter"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 2 #") "
0 0 14 3 5 #"accum"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 3 #"nil"
0 0 25 3 2 #"))"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 16 #";; Exercise 2.19"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 18 #"first-denomination"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 25 #"except-first-denomination"
0 0 25 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"no-more?"
0 0 25 3 1 #" "
0 0 14 3 5 #"null?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 16 #";; Exercise 2.20"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"same-parity"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 5 #"accum"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 3 #")) "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"iter"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 2 #") "
0 0 14 3 5 #"accum"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"iter"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 2 #") "
0 0 14 3 5 #"accum"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"reverse"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 16 #";; Exercise 2.21"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"square-list"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 3 #"nil"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 6 #"square"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 4 #")) ("
0 0 14 3 11 #"square-list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 6 #"define"
0 0 18 3 2 #" ("
0 0 18 3 11 #"square-list"
0 0 18 3 7 #" items)"
0 0 25 29 1 #"\n"
0 0 18 3 4 #";  ("
0 0 18 3 3 #"map"
0 0 18 3 1 #" "
0 0 18 3 6 #"square"
0 0 18 3 8 #" items))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.22"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 5 #"; The"
0 0 18 3 1 #" "
0 0 18 3 5 #"first"
0 0 18 3 1 #" "
0 0 18 3 7 #"attempt"
0 0 18 3 9 #" reverses"
0 0 18 3 1 #" "
0 0 18 3 7 #"because"
0 0 18 3 1 #" "
0 0 18 3 8 #"building"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 4 #"list"
0 0 18 3 13 #" iteratively "
0 0 25 29 1 #"\n"
0 0 18 3 2 #"; "
0 0 18 3 4 #"with"
0 0 18 3 1 #" "
0 0 18 3 4 #"cons"
0 0 18 3 1 #" "
0 0 18 3 4 #"only"
0 0 18 3 1 #" "
0 0 18 3 5 #"works"
0 0 18 3 1 #" "
0 0 18 3 14 #"back-to-front."
0 0 18 3 1 #" "
0 0 18 3 3 #"The"
0 0 18 3 1 #" "
0 0 18 3 6 #"second"
0 0 18 3 1 #" "
0 0 18 3 7 #"version"
0 0 18 3 1 #" "
0 0 18 3 5 #"doesn"
0 0 18 3 3 #"'t "
0 0 25 29 1 #"\n"
0 0 18 3 9 #"; produce"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 4 #"list"
0 0 18 3 1 #" "
0 0 18 3 3 #"but"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 9 #"structure"
0 0 18 3 1 #" "
0 0 18 3 31 #"like ((((1) 4) 9) 16) -- which "
0 0 25 29 1 #"\n"
0 0 18 3 7 #"; again"
0 0 18 3 1 #" "
0 0 18 3 4 #"puts"
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 18 3 4 #"last"
0 0 18 3 1 #" "
0 0 18 3 7 #"element"
0 0 18 3 1 #" "
0 0 18 3 4 #"near"
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 18 3 5 #"\"top\""
0 0 18 3 1 #" "
0 0 18 3 2 #"of"
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 18 3 15 #"data structure."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.23"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"for-each"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 14 3 3 #"nil"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 16 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 8 #"for-each"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.24"
0 0 25 29 1 #"\n"
0 0 18 3 15 #"; (1 (2 (3 4)))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #"; [1|.] > [.|nil]"
0 0 25 29 1 #"\n"
0 0 18 3 12 #";          v"
0 0 25 29 1 #"\n"
0 0 18 3 25 #";         [2|.] > [.|nil]"
0 0 25 29 1 #"\n"
0 0 18 3 20 #";                  v"
0 0 25 29 1 #"\n"
0 0 18 3 33 #";                 [3|.] > [4|nil]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 4 #";  *"
0 0 25 29 1 #"\n"
0 0 18 3 5 #"; / \\"
0 0 25 29 1 #"\n"
0 0 18 3 6 #";1   *"
0 0 25 29 1 #"\n"
0 0 18 3 7 #";   / \\"
0 0 25 29 1 #"\n"
0 0 18 3 8 #";  2   *"
0 0 25 29 1 #"\n"
0 0 18 3 9 #";     / \\"
0 0 25 29 1 #"\n"
0 0 18 3 10 #";    3   4"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; exercise 2.25"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 7         439 4           0 0           0 72 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #" ("
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 2 #") "
0 0 22 3 1 #"9"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 22 3 1 #"7"
0 0 25 29 1 #"\n"
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 2 #"(("
0 0 22 3 1 #"7"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 22 3 1 #"7"
0 0 25 29 1 #"\n"
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 22 3 1 #"2"
0 0 25 3 2 #" ("
0 0 22 3 1 #"3"
0 0 25 3 2 #" ("
0 0 22 3 1 #"4"
0 0 25 3 2 #" ("
0 0 22 3 1 #"5"
0 0 25 3 2 #" ("
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 12 #"))))))))))))"
0 0 25 29 1 #"\n"
0 0 22 3 1 #"7"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercuse 2.26"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 7         415 4           0 0           0 68 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"(("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #") "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"(("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #") ("
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 2 #"))"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.27"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"deep-reverse"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 2 #") "
0 0 14 3 5 #"accum"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"iter"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 12 #"deep-reverse"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 3 #")) "
0 0 14 3 5 #"accum"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 3 #"nil"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.28"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"fringe"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 2 #") "
0 0 14 3 5 #"accum"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 4 #"head"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 3 #")) "
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 4 #"tail"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 4 #"head"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"head"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"head"
0 0 25 3 2 #") "
0 0 14 3 4 #"tail"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"head"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"head"
0 0 25 3 2 #") "
0 0 14 3 4 #"tail"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 4 #"iter"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 4 #"head"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 2 #") "
0 0 14 3 4 #"tail"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"reverse"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 3 #"nil"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.29"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 4 #";; a"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"left-branch"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 6 #"define"
0 0 18 3 2 #" ("
0 0 18 3 12 #"right-branch"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 3 #") ("
0 0 18 3 8 #"list-ref"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 4 #" 1))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"branch-length"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 6 #"define"
0 0 18 3 2 #" ("
0 0 18 3 16 #"branch-structure"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 3 #") ("
0 0 18 3 8 #"list-ref"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 4 #" 1))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 4 #";; b"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"total-weight"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 12 #"total-weight"
0 0 25 3 2 #" ("
0 0 14 3 16 #"branch-structure"
0 0 25 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 12 #"total-weight"
0 0 25 3 2 #" ("
0 0 14 3 16 #"branch-structure"
0 0 25 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 6 #"mobile"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 4 #";; c"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"branch-torque"
0 0 25 3 1 #" "
0 0 14 3 6 #"branch"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 25 3 2 #" ("
0 0 14 3 13 #"branch-length"
0 0 25 3 1 #" "
0 0 14 3 6 #"branch"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 12 #"total-weight"
0 0 25 3 2 #" ("
0 0 14 3 16 #"branch-structure"
0 0 25 3 1 #" "
0 0 14 3 6 #"branch"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"torque"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 13 #"branch-torque"
0 0 25 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 13 #"branch-torque"
0 0 25 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"balanced?"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 6 #"torque"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 9 #"balanced?"
0 0 25 3 2 #" ("
0 0 14 3 16 #"branch-structure"
0 0 25 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 9 #"balanced?"
0 0 25 3 2 #" ("
0 0 14 3 16 #"branch-structure"
0 0 25 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 25 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 2 #"#t"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 4 #";; d"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-mobile"
0 0 25 3 1 #" "
0 0 14 3 4 #"left"
0 0 25 3 1 #" "
0 0 14 3 5 #"right"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 4 #"left"
0 0 25 3 1 #" "
0 0 14 3 5 #"right"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-branch"
0 0 25 3 1 #" "
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 9 #"structure"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 9 #"structure"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"right-branch"
0 0 25 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 16 #"branch-structure"
0 0 25 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 7         295 4           0 0           0 48 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"mob"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-mobile"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 11 #"make-branch"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 11 #"make-branch"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-mobile"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 11 #"make-branch"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 3 #"150"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 11 #"make-branch"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 9 #"balanced?"
0 0 25 3 1 #" "
0 0 14 3 3 #"mob"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 22 3 2 #"#t"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.30"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 9 #";directly"
0 0 25 29 1 #"\n"
0 7         283 4           0 0           0 46 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"square-tree"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 11 #"square-tree"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 4 #")) ("
0 0 14 3 11 #"square-tree"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 2 #") "
0 0 14 3 3 #"nil"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 6 #"square"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 4 #"))))"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 10 #";using map"
0 0 25 29 1 #"\n"
0 7         247 4           0 0           0 40 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"square-tree"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 8 #"sub-tree"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 8 #"sub-tree"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 11 #"square-tree"
0 0 25 3 1 #" "
0 0 14 3 8 #"sub-tree"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 6 #"square"
0 0 25 3 1 #" "
0 0 14 3 8 #"sub-tree"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 14 3 4 #"tree"
0 0 25 3 11 #"))         "
0 0 25 29 1 #"\n"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.31"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"tree-map"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 8 #"tree-map"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 4 #")) ("
0 0 14 3 8 #"tree-map"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 2 #") "
0 0 14 3 3 #"nil"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 6 #"))))  "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"square-tree"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 3 #") ("
0 0 14 3 8 #"tree-map"
0 0 25 3 1 #" "
0 0 14 3 6 #"square"
0 0 25 3 1 #" "
0 0 14 3 4 #"tree"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.32"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 63
#";For some arbitrary item X in S (say, the first), each subset U"
0 0 25 29 1 #"\n"
0 0 18 3 62
#";of S either contains X or not. Each subset U which contains X"
0 0 25 29 1 #"\n"
0 0 18 3 62
#";corresponds to a subset U-{X} that does not. Then all subsets"
0 0 25 29 1 #"\n"
0 0 18 3 63
#";of S is equal to all subsets of S-{X} and all subsets of S-{X}"
0 0 25 29 1 #"\n"
0 0 18 3 8 #";with X."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"subsets"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 3 #"nil"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 16 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 4 #"rest"
0 0 25 3 2 #" ("
0 0 14 3 7 #"subsets"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #") "
0 0 14 3 1 #"x"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                          "
0 0 14 3 4 #"rest"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.33"
0 0 25 29 1 #"\n"
0 7         457 4           0 0           0 75 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 1 #"p"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 14 3 1 #"y"
0 0 25 3 3 #")) "
0 0 14 3 3 #"nil"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 25 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 25 3 3 #") ("
0 0 14 3 10 #"accumulate"
0 0 25 3 1 #" "
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 25 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 3 #") ("
0 0 14 3 10 #"accumulate"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 3 #")) "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 2 #"))"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.34"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"horner-eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 20 #"coefficient-sequence"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 10 #"this-coeff"
0 0 25 3 1 #" "
0 0 14 3 12 #"higher-terms"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 10 #"this-coeff"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 12 #"higher-terms"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 22 3 1 #"0"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 14 3 20 #"coefficient-sequence"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; exercise 2.35"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"count-leaves"
0 0 25 3 1 #" "
0 0 14 3 1 #"t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 12 #"count-leaves"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 1 #"t"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; exercise 2.36"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"accumulate-n"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 4 #"init"
0 0 25 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 14 3 3 #"nil"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 10 #"accumulate"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 4 #"init"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 12 #"accumulate-n"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 4 #"init"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; exercise 2.37"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"vector-*-vector"
0 0 25 3 1 #" "
0 0 14 3 1 #"m"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 10 #"accumulate"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 1 #"m"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"matrix-*-vector"
0 0 25 3 1 #" "
0 0 14 3 1 #"m"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 3 #") ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 15 #"vector-*-vector"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 3 #")) "
0 0 14 3 1 #"m"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 25 3 1 #" "
0 0 14 3 3 #"mat"
0 0 25 3 3 #") ("
0 0 14 3 12 #"accumulate-n"
0 0 25 3 1 #" "
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 3 #"nil"
0 0 25 3 1 #" "
0 0 14 3 3 #"mat"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"matrix-*-matrix"
0 0 25 3 1 #" "
0 0 14 3 1 #"m"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 4 #"cols"
0 0 25 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"row"
0 0 25 3 3 #") ("
0 0 14 3 15 #"matrix-*-vector"
0 0 25 3 1 #" "
0 0 14 3 4 #"cols"
0 0 25 3 1 #" "
0 0 14 3 3 #"row"
0 0 25 3 3 #")) "
0 0 14 3 1 #"m"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; exercise 2.38"
0 0 25 29 1 #"\n"
0 7         517 4           0 0           0 85 0 25 3 1 #"("
0 0 14 3 10 #"fold-right"
0 0 25 3 1 #" "
0 0 14 3 1 #"/"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 3 #"3/2"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"fold-left"
0 0 25 3 1 #" "
0 0 14 3 1 #"/"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 3 #"1/6"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"fold-right"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 3 #"nil"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 22 3 1 #"2"
0 0 25 3 2 #" ("
0 0 22 3 1 #"3"
0 0 25 3 6 #" ())))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"fold-left"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 3 #"nil"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 7 #" (((() "
0 0 22 3 1 #"1"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"3"
0 0 25 3 1 #")"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 11 #";Fold-left "
0 0 18 3 3 #"and"
0 0 18 3 1 #" "
0 0 18 3 10 #"fold-right"
0 0 18 3 1 #" "
0 0 18 3 5 #"would"
0 0 18 3 1 #" "
0 0 18 3 2 #"be"
0 0 18 3 1 #" "
0 0 18 3 9 #"identical"
0 0 18 3 1 #" "
0 0 18 3 2 #"if"
0 0 18 3 5 #" the "
0 0 25 29 1 #"\n"
0 0 18 3 14 #";operation is "
0 0 18 3 17 #"associative, i.e."
0 0 25 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 2 #"op"
0 0 18 3 2 #" ("
0 0 18 3 2 #"op"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 1 #"b"
0 0 18 3 2 #") "
0 0 18 3 1 #"c"
0 0 18 3 2 #") "
0 0 18 3 2 #"=="
0 0 18 3 2 #" ("
0 0 18 3 2 #"op"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 2 #" ("
0 0 18 3 2 #"op"
0 0 18 3 1 #" "
0 0 18 3 5 #"b c))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.39"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 7         181 4           0 0           0 29 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"fold-right"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 3 #") ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 4 #"))) "
0 0 14 3 3 #"nil"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 2 #"))"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 7         169 4           0 0           0 27 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"fold-left"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #")) "
0 0 14 3 3 #"nil"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 2 #"))"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 18 #";;; Exercise 2.40 "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"unique-pairs"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"flatmap"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"i"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"j"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"j"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 4 #")) ("
0 0 14 3 18 #"enumerate-interval"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 14 3 3 #"dec"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 18 #"enumerate-interval"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"prime-sum-pairs"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 13 #"make-pair-sum"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 10 #"prime-sum?"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 12 #"unique-pairs"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.41"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"unique-triples"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"flatmap"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"i"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 4 #"))) "
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 12 #"unique-pairs"
0 0 25 3 2 #" ("
0 0 14 3 3 #"dec"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 18 #"enumerate-interval"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 17 #";;; Exercise 2.42"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 49 #";Since the algorithm fills in from left to right,"
0 0 25 29 1 #"\n"
0 0 18 3 5 #";the "
0 0 18 3 14 #"representation"
0 0 18 3 1 #" "
0 0 18 3 2 #"is"
0 0 18 3 1 #" "
0 0 18 3 4 #"just"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 4 #"list"
0 0 18 3 1 #" "
0 0 18 3 2 #"of"
0 0 18 3 1 #" "
0 0 18 3 11 #"row numbers"
0 0 25 29 1 #"\n"
0 0 18 3 8 #";running"
0 0 18 3 1 #" "
0 0 18 3 4 #"from"
0 0 18 3 1 #" "
0 0 18 3 9 #"rightmost"
0 0 18 3 1 #" "
0 0 18 3 5 #"queen"
0 0 18 3 1 #" "
0 0 18 3 18 #"to left; the last "
0 0 25 29 1 #"\n"
0 0 18 3 8 #";element"
0 0 18 3 1 #" "
0 0 18 3 2 #"in"
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 18 3 4 #"list"
0 0 18 3 1 #" "
0 0 18 3 2 #"is"
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 18 3 5 #"first"
0 0 18 3 5 #" row."
0 0 25 29 1 #"\n"
0 0 18 3 54 #";e.g. the solution in Figure 2.8 is (6 4 1 5 8 2 7 3) "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"empty-board"
0 0 25 3 1 #" "
0 0 14 3 3 #"nil"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"adjoin-position"
0 0 25 3 1 #" "
0 0 14 3 3 #"row"
0 0 25 3 1 #" "
0 0 14 3 3 #"col"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 3 #"col"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 3 #"row"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 20 3 36 #"\"must adjoin queens in column order\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"safe?"
0 0 25 3 1 #" "
0 0 14 3 1 #"k"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 18 3 34 #"; check if rightmost queen is safe"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 2 #") "
0 0 14 3 1 #"k"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 20 3 29 #"\"can only check newest queen\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 1 #" "
0 0 14 3 2 #"up"
0 0 25 3 1 #" "
0 0 14 3 6 #"across"
0 0 25 3 1 #" "
0 0 14 3 4 #"down"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 18 3 54 #"; check each queen safe from attack by rightmost queen"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 5 #"queen"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 16 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 5 #"queen"
0 0 25 3 1 #" "
0 0 14 3 2 #"up"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 5 #"queen"
0 0 25 3 1 #" "
0 0 14 3 4 #"down"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 5 #"queen"
0 0 25 3 1 #" "
0 0 14 3 6 #"across"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 3 #"inc"
0 0 25 3 1 #" "
0 0 14 3 2 #"up"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                            "
0 0 14 3 6 #"across"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 3 #"dec"
0 0 25 3 1 #" "
0 0 14 3 4 #"down"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 16 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 5 #"queen"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"iter"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"board"
0 0 25 3 3 #") ("
0 0 14 3 3 #"inc"
0 0 25 3 1 #" "
0 0 14 3 5 #"queen"
0 0 25 3 2 #") "
0 0 14 3 5 #"queen"
0 0 25 3 2 #" ("
0 0 14 3 3 #"dec"
0 0 25 3 1 #" "
0 0 14 3 5 #"queen"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 8 #";;; 2.43"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 64
#";; Louis's code generates ALL positions at once before filtering"
0 0 25 29 1 #"\n"
0 0 18 3 61
#";; -- so a n assignment that is ruled out on the third queen "
0 0 25 29 1 #"\n"
0 0 18 3 54 #";; generates a bunch of irrelevant child assignments. "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 18 3 19 #";; pasted from book"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"queens"
0 0 25 3 1 #" "
0 0 14 3 10 #"board-size"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"queen-cols"
0 0 25 3 1 #" "
0 0 14 3 1 #"k"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 1 #"k"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 11 #"empty-board"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 6 #"filter"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 9 #"positions"
0 0 25 3 3 #") ("
0 0 14 3 5 #"safe?"
0 0 25 3 1 #" "
0 0 14 3 1 #"k"
0 0 25 3 1 #" "
0 0 14 3 9 #"positions"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 7 #"flatmap"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 14 #"rest-of-queens"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 7 #"new-row"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 15 #"adjoin-position"
0 0 25 3 1 #" "
0 0 14 3 7 #"new-row"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                    "
0 0 14 3 1 #"k"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                    "
0 0 14 3 14 #"rest-of-queens"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 18 #"enumerate-interval"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 10 #"board-size"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"queen-cols"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"k"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"queen-cols"
0 0 25 3 1 #" "
0 0 14 3 10 #"board-size"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #" ("
0 0 14 3 16 #"smallest-divisor"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"smallest-divisor"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 12 #"find-divisor"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"find-divisor"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 6 #"square"
0 0 25 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 8 #"divides?"
0 0 25 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 12 #"test-divisor"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 12 #"find-divisor"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"divides?"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"prime-sum?"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 6 #"prime?"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 2 #") "
0 0 14 3 3 #"nil"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 9 #"predicate"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"make-pair-sum"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"flatmap"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"accumulate"
0 0 25 3 1 #" "
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 3 #"nil"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"enumerate-interval"
0 0 25 3 1 #" "
0 0 14 3 3 #"low"
0 0 25 3 1 #" "
0 0 14 3 4 #"high"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 14 3 3 #"low"
0 0 25 3 1 #" "
0 0 14 3 4 #"high"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 3 #"nil"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 3 #"low"
0 0 25 3 2 #" ("
0 0 14 3 18 #"enumerate-interval"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 3 #"low"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #") "
0 0 14 3 4 #"high"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"scale-list"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 1 #" "
0 0 14 3 6 #"factor"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 6 #"factor"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 14 3 5 #"items"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"fold-left"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 7 #"initial"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 6 #"result"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"iter"
0 0 25 3 2 #" ("
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 25 3 1 #" "
0 0 14 3 7 #"initial"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"accumulate"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 7 #"initial"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 7 #"initial"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 2 #"op"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"accumulate"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 7 #"initial"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"fold-right"
0 0 25 3 1 #" "
0 0 14 3 10 #"accumulate"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"square"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"us-coins"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"uk-coins"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 3 #"0.5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 16 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 2 #"cc"
0 0 25 3 1 #" "
0 0 14 3 6 #"amount"
0 0 25 3 1 #" "
0 0 14 3 11 #"coin-values"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 6 #"amount"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           (("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 6 #"amount"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #") ("
0 0 14 3 8 #"no-more?"
0 0 25 3 1 #" "
0 0 14 3 11 #"coin-values"
0 0 25 3 3 #")) "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 2 #"cc"
0 0 25 3 1 #" "
0 0 14 3 6 #"amount"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 25 #"except-first-denomination"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 14 3 11 #"coin-values"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 2 #"cc"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 6 #"amount"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 18 #"first-denomination"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                       "
0 0 14 3 11 #"coin-values"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 14 3 11 #"coin-values"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0
